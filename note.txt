在根目录新建 pnpm 的工作区文件 pnpm-workspace.yaml 就可以将包进行关联

使用pnpm如果要安装在项目根目录下,则需要加-w

但是有一个问题就是 ts 无法识别*.vue文件,所以编译器会报红

此时我们需要新建一个声明文件vue-shim.d.ts,让 ts 认识*.vue的文件

我们都知道,使用 setup 语法进行 Vue 组件的开发是非常方便的,但是会有一个问题,就是当我们使用 setup 语法时该怎么给组件命名呢?

第二种方式就是使用插件unplugin-vue-define-options解决,在测试环境中,我们需要把它配置在 play 项目中
首先全局安装unplugin-vue-define-options,因为这个插件后面打包配置也需要用到,最新版本安装会提示错误,看后续作者如何解决吧,暂时用// @ts-ignore忽略

随着前端诸如webpack，rollup，vite的发展，gulp感觉似乎好像被取代了。
其实并没有，只不过它从台前退居到了幕后。我们仍然可以在很多项目中看到它的身影，比如elementplus、vant等。
现在gulp更多的是做流程化的控制。比如我们要把一个大象放进冰箱里就需要 打开冰箱门->把大象放进冰箱->关上冰箱门，这就是一个简单的流程，使用gulp就可以规定这些流程，将这个流程自动化。

但是此时的所有样式文件还是会统一打包到 style.css 中,还是不能进行样式的按需加载,所以接下来我们将让 vite 不打包样式文件,样式文件后续单独进行打包。

当我们使用 Vite 库模式打包的时候,vite 会将样式文件全部打包到同一个文件中,这样的话我们每次都要全量引入所有样式文件做不到按需引入的效果。所以打包的时候我们可以不让 vite 打包样式文件,样式文件将使用 gulp 进行打包。那么本篇文章将介绍如何使用 gulp 打包样式文件,以及如何按需加载样式文件。

src/**/*.{js,vue}：匹配 src 目录下所有的 js 和 vue 文件
匹配规则为 glob-pattern:

** 表示递归匹配目录
/*.{js,vue}会展开为 /*.js /*.vue


逆向匹配：!(目录名1|目录名2)/**/*.{js,vue} 匹配除了目录名1和目录名2外的所有目录下的js和vue文件
